ðŸŒŸ Introduction to Java :

Java is one of the most popular, high-level programming languages, widely used for building scalable and efficient applications.
It was developed by Sun Microsystems (now owned by Oracle) in 1995. Java follows the principle of "Write Once, Run Anywhere" (WORA),
which means that Java programs can be run on any platform that supports Java without the need for recompilation.
This is made possible by the Java Virtual Machine (JVM), which allows Java code to be executed on any platform,
making it highly versatile and platform-independent.


ðŸ¤” What is Java?
Java is an object-oriented, class-based, general-purpose programming language.
It is designed to have as few implementation dependencies as possible.
This means Java code can be written once and run on any device that has a JVM installed,
making Java ideal for building cross-platform applications. Java is widely used in web development,
mobile applications (especially Android), enterprise applications, and embedded systems.

Key characteristics of Java include:

Platform Independence : Java programs are platform-independent due to the JVM.
Object-Oriented       : Java uses the object-oriented paradigm, focusing on objects and classes.
Robust                : Java has strong memory management, exception handling, and type-checking features.
Multithreading Support: Java provides built-in support for multithreading, allowing programs to perform multiple tasks simultaneously.


ðŸ§© Why Java is an Object-Oriented Programming Language?
Java is considered an Object-Oriented Programming (OOP) language because it follows the four main principles of OOP:

Encapsulation: Java allows you to bundle data (variables) and methods (functions) into a single unit called a class.
This provides a clear structure for code, where objects hold both state and behavior.

Inheritance: Java supports the concept of inheritance, allowing classes to inherit properties and behaviors from other classes.
 This promotes code reuse and establishes a natural hierarchy between classes.

Polymorphism: Java allows objects to take many forms. Through method overriding (runtime polymorphism) and method overloading
 (compile-time polymorphism), Java can process different types of objects in a uniform way, enhancing flexibility and scalability.

Abstraction: Java provides abstraction, which means hiding the implementation details and only showing the essential features
of an object.This makes it easier to manage complex systems and provides a cleaner interface for developers.

By supporting these four principles, Java ensures that code is modular, reusable, and easier to maintain,
making it an ideal language for building large-scale applications



ðŸ”„ Difference Between Functional,Procedural, and Object-Oriented Programming (OOP)
1. Functional Programming (FP)
Focus: Functions (stateless operations).

Key Idea  : Computation is treated as the evaluation of mathematical functions. It avoids changing-state and mutable data.

Key Features:
First-class functions (functions can be passed around as arguments).
Immutability.
Higher-order functions.

Example languages: Haskell, Lisp, Scala, JavaScript (to some extent).

2. Procedural Programming (PP)
Focus: Procedures or routines (functions) that operate on data.

Key Idea: Programs are structured around the concept of procedures (also known as functions or methods),
and the data is typically stored in variables or arrays.

Key Features:
Focus on procedure calls.
Data and functions are separate.
Follows a sequence of steps (linear execution).

Example languages: C, Pascal.

3. Object-Oriented Programming (OOP)
Focus: Objects (data structures that contain both state and behavior).

Key Idea: OOP is based on the concept of objects, which encapsulate data and methods together. The idea is to model
real-world entities through objects and define the relationship between them.

Key Features:
Encapsulation, inheritance, polymorphism, and abstraction.
Classes and objects are central.
Methods and data are bundled together in a class.

Example languages: Java, C++, Python, Ruby.